version: '3.7'

networks:
  chainpoint:

secrets:
  BITCOIN_WIF:
    external: true

services:
  abci:
    image: gcr.io/chainpoint-registry/github_chainpoint_chainpoint-core/go-abci-service:${DOCKER_TAG:-latest}
    build:
      context: .
      dockerfile: docker/Dockerfile.abci
    depends_on:
      - rabbitmq
      - api
    user: ${USERID}:${GROUPID}
    environment:
      PEERS: ${PEERS}
      SEEDS: ${SEEDS}
      CHAINPOINT_CORE_BASE_URI: ${CHAINPOINT_CORE_BASE_URI}]
      TENDERMINT_HOST: 127.0.0.1
      TENDERMINT_PORT: 26657
      NETWORK: ${NETWORK:-testnet}
      ANCHOR: 'true'
      AUDIT: 'true'
      NODE_MANAGEMENT: 'true'
      AGGREGATE: 'true'
      AGGREGATION_THREADS: '4'
      HASHES_PER_MERKLE_TREE: '25000'
      ANCHOR_INTERVAL: '60'
      LOG_FILTER: 'main:debug,state:info,*:error'
      LOG_LEVEL: 'info'
    volumes:
      - ~/.chainpoint/core/config/node_1:/tendermint/config
      - ~/.chainpoint/core/config/node_1/data:/tendermint/data
    ports:
      - target: 26656
        published: 26656
        protocol: tcp
        mode: host
    deploy:
      mode: global
      labels:
        - 'traefik.enable=true'
        - 'traefik.rpc.port=26657'
        - 'traefik.rpc.frontend.entryPoints=rpc'
        - 'traefik.rpc.frontend.rule=PathPrefix:/'
        - 'traefik.docker.network=chainpoint-core_chainpoint'
        - 'traefik.backend.loadbalancer.swarm=true'
      placement:
        constraints: [node.role==manager]
    networks:
      - chainpoint
    logging:
      driver: 'json-file'
      options:
        max-size: '1g'
        max-file: '5'

  # HTTP API
  # Restify Node public web API service.
  #
  # Note : You don't access this directly, but through
  # the nginx-proxy load balancer. This service cannot be
  # given an explicit container_name since it needs
  # to be scalable with 'docker-compose scale api=5'
  #
  # The VIRTUAL_HOST env var is used by the nginx-proxy
  # to rebuild its reverse proxy host config and must be
  # passed in by the HTTP client:
  #
  # Start With:
  # docker-compose up -d --build nginx-proxy
  #
  # curl -i http://127.0.0.1/
  #
  # PORTS : 8080
  #
  api:
    restart: always
    image: gcr.io/chainpoint-registry/github_chainpoint_chainpoint-core/node-api-service:${DOCKER_TAG:-latest}
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    user: ${USERID}:${GROUPID}
    depends_on:
      - redis
      - rabbitmq
      - postgres
    networks:
      - chainpoint
    deploy:
      mode: replicated
      replicas: 2
      labels:
        - 'traefik.enable=true'
        - 'traefik.port=8080'
        - 'traefik.frontend.entryPoints=http'
        - 'traefik.frontend.rule=PathPrefix:/'
        - 'traefik.docker.network=chainpoint-core_chainpoint'
        - 'traefik.backend.loadbalancer.swarm=true'
      update_config:
        parallelism: 1
        delay: 1s
      restart_policy:
        condition: any
        delay: 1s
        max_attempts: 5
        window: 120s
    environment:
      NODE_ENV: ${NODE_ENV}
      NETWORK: ${NETWORK:-testnet}
      CHAINPOINT_CORE_BASE_URI: ${CHAINPOINT_CORE_BASE_URI}
      LND_CERT: ${LND_CERT}
      LND_MACAROON: ${LND_MACAROON}
      LND_HOST: ${LND_HOST}
      VIRTUAL_HOST: api.local
      TENDERMINT_URI: http://abci:26657
      UV_THREADPOOL_SIZE: 128
    tty: true
    logging:
      driver: 'json-file'
      options:
        max-size: '1g'
        max-file: '5'

  # Bitcoin Transmit
  # Send Calendar Block Merkle roots to be embedded in a BTC transaction.
  #
  btc-tx:
    restart: always
    image: gcr.io/chainpoint-registry/github_chainpoint_chainpoint-core/node-btc-tx-service:${DOCKER_TAG:-latest}
    build:
      context: .
      dockerfile: docker/Dockerfile.btc-tx
    user: ${USERID}:${GROUPID}
    container_name: btc-tx-core
    depends_on:
      - rabbitmq
    networks:
      - chainpoint
    secrets:
      - BITCOIN_WIF
    environment:
      NODE_ENV: ${NODE_ENV}
      NETWORK: ${NETWORK:-testnet}
      CHAINPOINT_CORE_BASE_URI: ${CHAINPOINT_CORE_BASE_URI}
      BTC_RPC_URI_LIST: ${BTC_RPC_URI_LIST}
      BLOCKCYPHER_API_TOKEN: ${BLOCKCYPHER_API_TOKEN}
      BITCOIN_WIF: DOCKER-SECRET->BITCOIN_WIF
    tty: true
    logging:
      driver: 'json-file'
      options:
        max-size: '1g'
        max-file: '5'

  # Bitcoin Transmit MonitorF
  # Monitor and report on the state of BTC transactions this app has submitted.
  #
  btc-mon:
    restart: always
    image: gcr.io/chainpoint-registry/github_chainpoint_chainpoint-core/node-btc-mon-service:${DOCKER_TAG:-latest}
    build:
      context: .
      dockerfile: docker/Dockerfile.btc-mon
    container_name: btc-mon-core
    user: ${USERID}:${GROUPID}
    depends_on:
      - rabbitmq
      - redis
    networks:
      - chainpoint
    environment:
      NODE_ENV: ${NODE_ENV}
      NETWORK: ${NETWORK:-testnet}
      BTC_RPC_URI_LIST: ${BTC_RPC_URI_LIST}
      BLOCKCYPHER_API_TOKEN: ${BLOCKCYPHER_API_TOKEN}
      LND_CERT: ${LND_CERT}
      LND_MACAROON: ${LND_MACAROON}
      LND_HOST: ${LND_HOST}
    tty: true
    logging:
      driver: 'json-file'
      options:
        max-size: '1g'
        max-file: '5'

  # Proof State
  # Encapsulates all persistent data storage for partial proof data.
  #
  proof-state:
    restart: always
    image: gcr.io/chainpoint-registry/github_chainpoint_chainpoint-core/node-proof-state-service:${DOCKER_TAG:-latest}
    build:
      context: .
      dockerfile: docker/Dockerfile.proof-state
    user: ${USERID}:${GROUPID}
    deploy:
      replicas: 2
    depends_on:
      - rabbitmq
      - postgres
    networks:
      - chainpoint
    environment:
      NODE_ENV: ${NODE_ENV}
      NETWORK: ${NETWORK:-testnet}
      CHAINPOINT_CORE_BASE_URI: ${CHAINPOINT_CORE_BASE_URI}
    tty: true
    logging:
      driver: 'json-file'
      options:
        max-size: '1g'
        max-file: '5'

  # Proof Generation
  # Responsible for constructing, signing, and validating Chainpoint proofs
  # for Calendar, Bitcoin, and Ethereum attestation levels.
  #
  proof-gen:
    restart: always
    image: gcr.io/chainpoint-registry/github_chainpoint_chainpoint-core/node-proof-gen-service:${DOCKER_TAG:-latest}
    build:
      context: .
      dockerfile: docker/Dockerfile.proof-gen
    user: ${USERID}:${GROUPID}
    deploy:
      replicas: 2
    depends_on:
      - rabbitmq
      - postgres
    networks:
      - chainpoint
    environment:
      NODE_ENV: ${NODE_ENV}
      NETWORK: ${NETWORK:-testnet}
    tty: true
    logging:
      driver: 'json-file'
      options:
        max-size: '1g'
        max-file: '5'

  # RabbitMQ
  #
  # Admin Page (username:pass)
  # http://127.0.0.1:15673/ (rabbitmq:rabbitmq)
  #
  # LOCAL PORTS:
  # amqp : 5673 (+1 over default)
  # http : 15673 (+1 over default)
  #
  rabbitmq:
    restart: always
    image: rabbitmq:3.6.11-management-alpine
    container_name: rabbitmq-core
    hostname: rabbitmq
    user: ${USERID}:${GROUPID}
    ports:
      - '5672'
      - '15672'
    environment:
      RABBITMQ_DEFAULT_USER: chainpoint
      RABBITMQ_DEFAULT_PASS: chainpoint
    networks:
      - chainpoint
    logging:
      driver: 'json-file'
      options:
        max-size: '1g'
        max-file: '5'

  # Redis
  #
  redis:
    restart: always
    image: redis:4.0.9
    container_name: redis-core
    user: ${USERID}:${GROUPID}
    ports:
      - '6379'
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ~/.chainpoint/core/data/redis:/data
    networks:
      - chainpoint
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
    logging:
      driver: 'json-file'
      options:
        max-size: '1g'
        max-file: '5'

  # Postgres
  #
  # See : https://hub.docker.com/_/postgres/
  # Note: Connect locally on OS X:
  #
  # Installs local client 'psql'
  #   brew install postgres
  #
  # Connect (uname/pass chainpoint/chainpoint):
  #   psql -h 127.0.0.1 -U chainpoint
  #
  postgres:
    restart: always
    image: postgres:11.2
    container_name: postgres-core
    user: ${USERID}:${GROUPID}
    volumes:
      - ~/.chainpoint/core/data/postgresql:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: chainpoint
      POSTGRES_PASSWORD: chainpoint
    ports:
      - '5433:5432'
    networks:
      - chainpoint
    logging:
      driver: 'json-file'
      options:
        max-size: '1g'
        max-file: '5'

  traefik:
    image: traefik
    command: --configfile="/data/traefik.toml"
    networks:
      - chainpoint
    ports:
      - target: 8080
        published: 80
        protocol: tcp
        mode: host
      - target: 8443
        published: 443
        protocol: tcp
        mode: hosts
      - target: 9000
        published: 9000
        protocol: tcp
        mode: host
      - target: 26657
        published: 26657
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.chainpoint/core/data/traefik:/data
    deploy:
      placement:
        constraints: [node.role==manager]
    logging:
      driver: 'json-file'
      options:
        max-size: '1g'
        max-file: '5'
